#!/bin/bash
set -e

DIR=$(dirname $(dirname "$0"))
PREFIX="kitten"

RMW_ENABLED=true
VATOMIC_ENABLED=true
NATIVE_ENABLED=true
HERD7_ENABLED=false
DAT3M_ENABLED=true
MODEL=aarch64
LITC_DIR=
INPUT=

CC=gcc
INC=$DIR/include
CROSS_COMPILE=aarch64-linux-gnu-
CROSS_CC="${CROSS_COMPILE}gcc"
CROSS_OBJDUMP="${CROSS_COMPILE}objdump"


function fail-usage {
    echo "$1 [options] <FILENAME|-in>"
    echo "Options:"
    echo "  -herd7 BOOL        Enable Herd7 check (default: $HERD7_ENABLED)"
    echo "  -dat3m BOOL        Enable Dartagnan check (default: $DAT3M_ENABLED)"
    echo "  -vatomic BOOL      Enable use of vatomic (default: $VATOMIC_ENABLED)"
    echo "  -rmw BOOL          Enable use of RMW (default: $RMW_ENABLED)"
    echo "  -cat STR           Which cat model to use (default: $MODEL)"
    echo "  -litc-dir PATH     Use a set of litc files to check (default: NONE)"
    echo
    exit 1
}

function bool_val {
    if [ "$1" = "on" ] || [ "$1" = "true" ]; then
        return 0
    elif [ "$1" = "off" ] || [ "$1" = "false" ]; then
        return 1
    else
        echo "error: invalid BOOL '$1'"
        exit 1
    fi
}

while [ $# -gt 0 ]; do
    case "$1" in
        -in)
            [ -z "$INPUT" ] || fail-usage
            INPUT=/dev/stdin
            ;;
        -herd7)
            shift
            if bool_val $1; then
                HERD7_ENABLED=true
            else
                HERD7_ENABLED=
            fi
            ;;
        -dat3m)
            shift
            if bool_val $1; then
                DAT3M_ENABLED=true
            else
                DAT3M_ENABLED=
            fi
            ;;
        -vatomic)
            shift
            if bool_val $1; then
                VATOMIC_ENABLED=true
            else
                VATOMIC_ENABLED=
            fi
            ;;
        -cat)
            shift
            MODEL="$1"
            ;;
        -litc-dir)
            shift
            LITC_DIR="$1"
            ;;
        -model)
            shift
            MODEL="$1"
            ;;
        -rmw)
            shift
            if bool_val $1; then
                RMW_ENABLED=true
            else
                RMW_ENABLED=
            fi
            ;;
        -h)
            fail-usage "$0"
            ;;
        *)
            [ -z "$INPUT" ] || fail-usage $0
            if [ $# != 1 ]; then
                INPUT="$1"
            fi
            ;;
    esac
    shift
done

if [ -z "$INPUT" ]; then
    INPUT="$DIR/test/kittens.dat"
fi

LITC_FLAGS="-c11 -cat fences.cat"
HERD7_FLAGS="-cat $MODEL.cat"
DAT3M_FLAGS="--bound=5 -cat models/$MODEL.cat"

function echopfx {
    echo -n "      "
}

function echop {
    echopfx
    echo "$*"
}

function grill {
    kitten="$1"

    if ! cmd/grill.scm $kitten > $PREFIX.smt; then
        echop grill failed
        exit 1
    fi

    if ! z3 $PREFIX.smt > $PREFIX.model; then
        echop unsat
        return 1
    fi

    echop grilled
}

function roast {
    if ! cmd/roast.scm $PREFIX.model > $PREFIX.litc; then
        echop roast failed
        exit 1
    fi

    if ! litmusC_check; then
	continue
    fi

    echop roasted
}

function litmusC_check {
    if [ "$HERD7_ENABLED" = "true" ]; then
 	 herd7 $LITC_FLAGS $PREFIX.litc > $PREFIX.litc.log
   	 if ! grep Sometimes $PREFIX.litc.log > /dev/null; then
   	     echop herd7 with litc failed
   	     echo "# herd7 $LITC_FLAGS $PREFIX.litc"
   	     exit 1
   	 fi
    fi

    return 0
}

function vatomic_check {
    if [ "$VATOMIC_ENABLED" = "true" ]; then
        if [ ! -f $INC/stdatomic.h ]; then
            cp $INC/stdatomic.bak.h $INC/stdatomic.h
        fi
    else
        rm -f $INC/stdatomic.h
    fi
}

function defuse {
    if ! cmd/defuse.scm $PREFIX.litc > $PREFIX.c; then
        echop "defuse failed"
        return 1
    fi

    if ! $CROSS_CC -I$INC -O3 -c -o $PREFIX.o $PREFIX.c; then
        echop "lowering failed"
        return 1
    fi

    if ! $CROSS_OBJDUMP -S $PREFIX.o > $PREFIX.dump; then
        echop "objdump failed"
        return 1
    fi

    if ! cmd/pasm.scm $PREFIX.litc $PREFIX.dump > $PREFIX.litmus; then
        echop "lifting failed"
        return 1
    fi

    echop defused
}

function native {
    if [ "$NATIVE_ENABLED" != "true" ]; then
        return 0
    fi
    if ! $CC -o $PREFIX.bin $PREFIX.c -lpthread; then
        return 1
    fi
    if ./$PREFIX.bin; then
        echop native: OK
        return 0
    else
        exit 1
    fi
}

function drop  {
    kitten="$1"
    if [ "$RMW_ENABLED" != "true" ]; then
        if echo "$kitten" | grep RMW > /dev/null; then
            echop skip RMW
            return 0
        fi
    fi
    return 1
}

function herd7-check {
    if [ "$HERD7_ENABLED" != "true" ]; then
        return 0
    fi

    herd7 $HERD7_FLAGS $PREFIX.litmus > $PREFIX.litmus.log 2>&1
    if grep Sometimes $PREFIX.litmus.log > /dev/null; then
        echop "herd7:  FAILED"
        echo "# herd7 $HERD7_FLAGS $PREFIX.litmus"
        return 1
    elif grep "unrolling limit exceeded" $PREFIX.litmus.log > /dev/null; then
        echop "herd7:  UNKNOWN"
    else
        echop "herd7:  OK"
    fi
    return 0
}

function dat3m-check {
    if [ "$DAT3M_ENABLED" != "true" ]; then
        return 0
    fi

    dat3m $DAT3M_FLAGS $PREFIX.litmus > $PREFIX.litmus.log
    if grep UNKNOWN $PREFIX.litmus.log > /dev/null; then
        echop "dat3m:  UNKNOWN"
    elif grep FAIL $PREFIX.litmus.log > /dev/null; then
        echop "dat3m:  OK"
    else
        echop "dat3m:  FAILED"
        echo "# dat3m $DAT3M_FLAGS $PREFIX.litmus"
        return 1
    fi
    return 0
}


function kitten-list {
    cd $DIR
    vatomic_check

    while read -r kitten; do
        if [ -z "$kitten" ]; then
            continue
        fi

        if echo "$kitten" | grep -e "^#" > /dev/null; then
            continue
        fi

        # cleanup
        for suf in o dump litmus litc c; do
            rm -f $PREFIX.$suf
            rm -f $PREFIX.$suf.log
        done

        # valid kitten, start loop
        echo
        echo "TEST: $kitten"

        if drop "$kitten"; then
            continue
        fi

        if ! grill "$kitten"; then
            continue
        fi

        if ! roast; then
            continue
        fi

        if ! defuse; then
            exit 1
        fi

        if ! native; then
            exit 1
        fi

        if ! herd7-check; then
            exit 1
        fi

        if ! dat3m-check; then
            exit 1
        fi

    done < "$INPUT"
    echo END
}

function litc-list {
    cd $DIR
    vatomic_check

    while read -r kitten; do
        if [ -z "$kitten" ]; then
            continue
        fi

        # cleanup
        for suf in o dump litmus litc c; do
            rm -f $PREFIX.$suf
            rm -f $PREFIX.$suf.log
        done

        # valid kitten, start loop
        echo
        echo "TEST: $kitten"

        if ! defuse; then
            exit 1
        fi

        if ! native; then
            exit 1
        fi

        if ! herd7-check; then
            exit 1
        fi

        if ! dat3m-check; then
            exit 1
        fi

    done < "$INPUT"
    echo END
}

(

    rm -f $INC/stdatomic.h

    if [ -z "${LITC_DIR}" ]; then
	kitten-list
    else
    	litc-list
    fi

)
